# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os
import re
import sys

def GlibMarshalEmitter(target, source, env):
  """ Inputs:
          target: unused
          source: list containing the source .list file
          env: the scons environment in which we are compiling
      Outputs:
          target: the list of targets we'll emit
          source: the list of sources we'll process"""
  output = str(source[0])
  output = output[0:output.rfind('.list')]
  target = [
    output + '.glibmarshal.c',
    output + '.glibmarshal.h'
  ]
  return target, source

def GlibMarshalGenerator(source, target, env, for_signature):
  """ Inputs:
          source: list of sources to process
          target: list of targets to generate
          env: scons environment in which we are working
          for_signature: unused
      Outputs: a list of commands to execute to generate the targets from
               the sources."""
  commands = []
  for target_file in target:
    if str(target_file).endswith('.glibmarshal.h'):
      mode_flag = '--header '
    else:
      mode_flag = '--body '
    cmd = '/usr/bin/glib-genmarshal %s --prefix=marshal ' \
          '%s > %s' % (mode_flag, str(source[0]), str(target_file))
    commands.append(cmd)
  return commands

glib_marshal_builder = Builder(generator = GlibMarshalGenerator,
                               emitter = GlibMarshalEmitter,
                               single_source = 1,
                               suffix = 'glibmarshal.c')

ibus_engines_builder = Builder(action = "./gen_engines.py $SOURCES > $TARGET")

input_methodwhitelist_builder = Builder(action =
                                        "./gen_input_method_whitelist.py " +
                                        "$SOURCES > $TARGET")

base_env = Environment(
    CPPPATH=['.', '..'],
    CCFLAGS=['-ggdb', '-fPIC', '-fno-exceptions', '-Wall', '-Werror'],
    LINKFLAGS=['-fPIC'],
)
base_env['BUILDERS']['GlibMarshal'] = glib_marshal_builder
base_env['BUILDERS']['IBusEngines'] = ibus_engines_builder
base_env['BUILDERS']['InputMethodWhitelist'] = input_methodwhitelist_builder
for key in Split('CC CXX AR RANLIB LD NM CFLAGS CCFLAGS LINKFLAGS'):
  value = os.environ.get(key)
  if value != None:
    base_env[key] = Split(value)

# Fix issue with scons not passing some vars through the environment.
for key in Split('PKG_CONFIG PKG_CONFIG_LIBDIR PKG_CONFIG_PATH SYSROOT'):
  if os.environ.has_key(key):
    base_env['ENV'][key] = os.environ[key]

SOURCES=['chromeos_cryptohome.cc',
         'chromeos_input_method.cc',
         'chromeos_input_method_ui.cc',
         'chromeos_keyboard.cc',
         'chromeos_login.cc',
         'chromeos_mount.cc',
         'chromeos_network.cc',
         'chromeos_power.cc',
         'chromeos_screen_lock.cc',
         'chromeos_speech_synthesis.cc',
         'chromeos_synaptics.cc',
         'chromeos_syslogs.cc',
         'chromeos_system.cc',
         'chromeos_update.cc',
         'chromeos_update_engine.cc',
         'marshal.glibmarshal.c',
         'version_check.cc',
]

env = base_env.Clone()
env.Append(LIBS=['base', 'chromeos', 'rt'])

# glib, dbus, and ibus environment
env.ParseConfig('%s --cflags --libs dbus-1 glib-2.0 gudev-1.0 dbus-glib-1 ibus-1.0 libpcrecpp libxklavier' % env['ENV']['PKG_CONFIG'])

env.GlibMarshal('marshal.glibmarshal.c', 'marshal.list')
ibus_component_dir = "%s%s" % (env['ENV']['SYSROOT'],
                               '/usr/share/ibus/component/')
env.IBusEngines('ibus_input_methods.h',
                [ibus_component_dir + 'chewing.xml',
                 ibus_component_dir + 'hangul.xml',
                 ibus_component_dir + 'm17n.xml',
                 ibus_component_dir + 'mozc.xml',
                 ibus_component_dir + 'pinyin.xml',
                 ibus_component_dir + 'xkb-layouts.xml'])

env.InputMethodWhitelist('chromeos_input_method_whitelist.h',
                         env['ENV']['SYSROOT'] +
                         '/usr/share/chromeos-assets' +
                         '/input_methods/whitelist.txt')

Default(env.SharedLibrary('cros', SOURCES))

env_test = base_env.Clone()
env_test.Append(LIBS=['base', 'dl', 'rt'])

env_test.ParseConfig('%s --cflags --libs gobject-2.0 dbus-1' % (
    env_test['ENV']['PKG_CONFIG']))

env_gtest = env_test.Clone()
env_gtest.Append(LIBS=['gtest'])

env_gtest_main = env_test.Clone()
env_gtest_main.Append(LIBS=['gtest', 'gtest_main', 'chromeos'])
env_gtest_main.ParseConfig('%s --cflags --libs libpcrecpp libxklavier' % (
    env_test['ENV']['PKG_CONFIG']))

Load = base_env.Object('load.cc')

# Tests that do not require libcros.so. The ebuild script for libcros
# automatically builds and runs the tests (libcros_unittests) if FEATURES="test"
# is set.
unittests = [
  env_gtest_main.Program('libcros_unittests',
                         ['chromeos_keyboard.cc',
                          'chromeos_keyboard_unittest.cc',
                          'chromeos_system.cc',
                          'chromeos_system_unittest.cc']),
]
unittest_alias = Alias('unittest', unittests)
AlwaysBuild(unittest_alias)

# Tests that do require libcros.so.
tests = [
  env_test.Program('monitor_power', ['monitor_power.cc', Load]),
  # This doesn't compile:
  # env_gtest.Program('monitor_input_method',
  #                   ['monitor_input_method.cc', Load]),
  env_gtest.Program('monitor_keyboard', ['monitor_keyboard.cc', Load]),
  # This is broken now.
  # env_test.Program('monitor_network', ['monitor_network.cc', Load]),
  env_test.Program('monitor_mount', ['monitor_mount.cc', Load]),
  env_test.Program('monitor_input_method_ui',
                   ['monitor_input_method_ui.cc', Load]),
  env_test.Program('login_drive', ['drive_login.cc', Load]),
  env_test.Program('monitor_update_engine', ['monitor_update_engine.cc', Load]),
  env_test.Program('cryptohome_drive', ['drive_cryptohome.cc', Load])
]
test_alias = Alias('test', tests)
AlwaysBuild(test_alias)

Alias('crosapi', base_env.StaticLibrary('crosapi', Load), CCFLAGS='-ggdb')
